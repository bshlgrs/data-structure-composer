
// access by index
getFirst <- getByIndex
getNext <- getByIndex
getByIndex <- getFirst + n * getNext
getByIndex <- unorderedEach
getLast <- getByIndex
getPrev <- getByIndex

// looping
unorderedEach <- each
each <- unorderedEach + nlogn
each <- n * getByIndex
each <- getFirst + n * getNext

// insertions
insertLast! <- getLast + insertAfterEndNode!
insertLast! <- insertAtIndex!
insertFirst! <- insertAtIndex!
insertFirst! <- getFirst + insertBeforeFrontNode!
insertAtIndex! <- getByIndex + insertAfterNode!
insertAtIndex! <- getByIndex + insertBeforeNode!
insertAfterNode! <- insertNextToNode!
insertAfterEndNode! <- insertAfterNode!
insertBeforeNode! <- insertNextToNode!
insertBeforeFrontNode! <- insertBeforeNode!
insertNextToNode! <- insertAtIndex!
extend! <- getLast + n * insertAfterEndNode!
insertAnywhere! <- insertAtIndex!
insertAnywhere! <- insertFirst!
insertAnywhere! <- insertLast!

// deletions
deleteAtIndex! <- getByIndex + deleteNode!
deleteFirst! <- deleteAtIndex!
deleteFirst! <- getFirst + deleteNodeWhichIsFirst!
deleteLast! <- deleteAtIndex!
deleteLast! <- getLast + deleteNodeWhichIsLast!
deleteNodeWhichIsFirst! <- deleteNode!
deleteNodeWhichIsLast! <- deleteNode!
deleteBetweenNodes! <- n * deleteNode! + n * getNext
deleteAtIndex! <- deleteBetweenNodes!

deleteFirstNodeWithValue! <- getFirstNodeWithValue[valueOrdering] + deleteNode!

// updates
updateFirstNode! <- getFirst + updateNodeWhichIsFirst!
updateNodeWhichIsFirst! <- updateNode!
updateFirstNode! <- deleteFirst! + insertBeforeFrontNode!

updateLastNode! <- getLast + updateNodeWhichIsLast!
updateNodeWhichIsLast! <- updateNode!
updateLastNode! <- deleteLast! + insertAfterEndNode!

updateByIndex! <- deleteAtIndex! + insertNextToNode!
updateByIndex! <- getByIndex + updateNode!

// stuff about orderings by values
quickSelect[f] <- unorderedEach
getKthBy[f] <- quickSelect[f]
getFirstBy[f] <- reduce[_{commutative, idempotent} <- f]
getFirstBy[f] <- getKthBy[f]
getLastBy[f] <- reduce[_{commutative, idempotent} <- f]
getLastBy[f] <- getKthBy[f]
countBetweenBy[f] <- unorderedEach
getMaximum <- getFirstBy[valueOrdering]
getMaximum <- getLastBy[valueOrdering]
getMinimum <- getLastBy[valueOrdering]
getMinimum <- getFirstBy[valueOrdering]
deleteFirstBy![f] <- getFirstBy[f] + deleteNode!
deleteLastBy![f] <- getLastBy[f] + deleteNode!
deleteMinimum! <- deleteFirstBy![valueOrdering]
deleteMaximum! <- deleteLastBy![valueOrdering]
getFirstNodeWithValue[f] <- unorderedEach
// The obvious implementation for getNearest is to just loop over everything
getNearest[f] <- unorderedEach
// using binary search:
getNearest[f] <- log(n) * getKthBy[f]

getRandomlyChosenElementWeightedByValue <- getSum + unorderedEach

// other reductions
count <- unorderedEach
contains <- count
contains <- getFirstNodeWithValue[_]
reduce[f] <- each + n * f
reduce[f] if f.commutative <- unorderedEach + n * f

count <- countOfEquivalenceClass[_]
countOfEquivalenceClass[f] <- unorderedEach
mostNumerousEquivalenceClass[f] <- unorderedEach
getMode <- mostNumerousEquivalenceClass[_]

// eg, querying for the sum of the elements between indexes i and j
twoSidedIndexRangeQuery[reduction] <- unorderedEach
reduce[f] <- twoSidedIndexRangeQuery[f]

// eg, querying for the sum of the elements between index 0 and index i
oneSidedIndexRangeQuery[reduction] <- unorderedEach
oneSidedIndexRangeQuery[reduction] <- twoSidedIndexRangeQuery[reduction]
rangeMinimumQuery <- twoSidedIndexRangeQuery[_{idempotent}]

// eg, querying for the number of elements whose values are in the range (a, b)
twoSidedValueRangeQuery[f, reduction] <- unorderedEach
// eg, querying for the sum of the k smallest elements
oneSidedValueRangeQuery[f, reduction] <- unorderedEach
oneSidedValueRangeQuery[f, reduction] <- twoSidedValueRangeQuery[f, reduction]

valueOrdering <- 1

getSum <- reduce[_{commutative, invertible} <- 1]
